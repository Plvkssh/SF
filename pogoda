import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import org.json.JSONArray;
import org.json.JSONObject;

public class WeatherService {

    private static final String API_KEY = "cc48a992-0f77-4b7d-b637-c9e554e445d6";
    private static final String BASE_URL = "https://api.weather.yandex.ru/v2/forecast";

    public static void main(String[] args) {
        try {
            String lat = "55.75"; // широта
            String lon = "37.62"; // долгота
            int limit = 7; // количество дней

            JSONObject response = getWeatherData(lat, lon, limit);
            if (response != null) {
                displayWeather(response, limit);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private static JSONObject getWeatherData(String lat, String lon, int limit) throws Exception {
        String url = BASE_URL + "?lat=" + lat + "&lon=" + lon + "&limit=" + limit;

        HttpClient client = HttpClient.newHttpClient();
        HttpRequest request = HttpRequest.newBuilder()
                .uri(URI.create(url))
                .header("X-Yandex-Weather-Key", API_KEY)
                .build();

        HttpResponse<String> response = client.send(request, HttpResponse.BodyHandlers.ofString());

        return new JSONObject(response.body());
    }

    private static void displayWeather(JSONObject jsonResponse, int limit) {
        System.out.println("Полный ответ JSON:");
        System.out.println(jsonResponse.toString(4)); // красивый вывод JSON

        JSONObject fact = jsonResponse.optJSONObject("fact");
        if (fact != null) {
            int currentTemp = fact.optInt("temp", Integer.MIN_VALUE);
            if (currentTemp != Integer.MIN_VALUE) {
                System.out.println("\nТекущая температура: " + currentTemp + "°C");
            }
        }

        JSONArray forecasts = jsonResponse.optJSONArray("forecasts");
        if (forecasts != null) {
            int sumTemp = 0;
            for (int i = 0; i < forecasts.length(); i++) {
                JSONObject forecast = forecasts.optJSONObject(i);
                if (forecast != null) {
                    JSONObject dayPart = forecast.optJSONObject("parts").optJSONObject("day");
                    if (dayPart != null) {
                        sumTemp += dayPart.optInt("temp_avg", 0);
                    }
                }
            }
            double averageTemp = sumTemp / (double) limit;
            System.out.println("Средняя температура за период: " + averageTemp + "°C");
        }
    }
}
