import java.util.Scanner;

public class Main {

    public static ChessBoard buildBoard() {
        ChessBoard board = new ChessBoard("White");

        board.board[0][0] = new Rook("White");
        board.board[0][1] = new Horse("White");
        board.board[0][2] = new Bishop("White");
        board.board[0][3] = new Queen("White");
        board.board[0][4] = new King("White");
        board.board[0][5] = new Bishop("White");
        board.board[0][6] = new Horse("White");
        board.board[0][7] = new Rook("White");
        board.board[1][0] = new Pawn("White");
        board.board[1][1] = new Pawn("White");
        board.board[1][2] = new Pawn("White");
        board.board[1][3] = new Pawn("White");
        board.board[1][4] = new Pawn("White");
        board.board[1][5] = new Pawn("White");
        board.board[1][6] = new Pawn("White");
        board.board[1][7] = new Pawn("White");

        board.board[7][0] = new Rook("Black");
        board.board[7][1] = new Horse("Black");
        board.board[7][2] = new Bishop("Black");
        board.board[7][3] = new Queen("Black");
        board.board[7][4] = new King("Black");
        board.board[7][5] = new Bishop("Black");
        board.board[7][6] = new Horse("Black");
        board.board[7][7] = new Rook("Black");
        board.board[6][0] = new Pawn("Black");
        board.board[6][1] = new Pawn("Black");
        board.board[6][2] = new Pawn("Black");
        board.board[6][3] = new Pawn("Black");
        board.board[6][4] = new Pawn("Black");
        board.board[6][5] = new Pawn("Black");
        board.board[6][6] = new Pawn("Black");
        board.board[6][7] = new Pawn("Black");
        return board;
    }

    public static void main(String[] args) {

        ChessBoard board = buildBoard();
        Scanner scanner = new Scanner(System.in);
        System.out.println("""
                Чтобы проверить игру надо вводить команды:
                'exit' - для выхода
                'replay' - для перезапуска игры
                'castling0' или 'castling7' - для рокировки по соответствующей линии
                'move 1 1 2 3' - для передвижения фигуры с позиции 1 1 на 2 3(поле это двумерный массив от 0 до 7)
                Проверьте могут ли фигуры ходить друг сквозь друга, корректно ли съедают друг друга, можно ли поставить шах и сделать рокировку?""");
        System.out.println();
        board.printBoard();
        while (true) {
            String s = scanner.nextLine();
            if (s.equals("exit")) break;
            else if (s.equals("replay")) {
                System.out.println("Заново");
                board = buildBoard();
                board.printBoard();
            } else {
                // further commands
            }
        }
    }
}

// Пример класса Bishop

public class Bishop extends ChessPiece {

    public Bishop(String color) {
        super(color);
    }

    @Override
    public boolean canMoveToPosition(ChessBoard board, int startRow, int startCol, int endRow, int endCol) {
        if (!isValidPosition(endRow, endCol)) return false;
        if (Math.abs(startRow - endRow) == Math.abs(startCol - endCol)) {
            int rowStep = (endRow > startRow) ? 1 : -1;
            int colStep = (endCol > startCol) ? 1 : -1;
            int row = startRow + rowStep;
            int col = startCol + colStep;
            while (row != endRow && col != endCol) {
                if (board.board[row][col] != null) return false;
                row += rowStep;
                col += colStep;
            }
            return board.board[endRow][endCol] == null || !board.board[endRow][endCol].getColor().equals(this.getColor());
        }
        return false;
    }

    private boolean isValidPosition(int row, int col) {
        return row >= 0 && row < 8 && col >= 0 && col < 8;
    }
}
public class Pawn extends ChessPiece {

    public Pawn(String color) {
        super(color);
    }

    @Override
    public boolean canMoveToPosition(ChessBoard board, int startRow, int startCol, int endRow, int endCol) {
        if (!isValidPosition(endRow, endCol)) return false;
        int direction = this.getColor().equals("White") ? 1 : -1;
        if (startCol == endCol && board.board[endRow][endCol] == null) {
            if (startRow + direction == endRow) {
                return true;
            }
        }
        if (Math.abs(startCol - endCol) == 1 && startRow + direction == endRow) {
            if (board.board[endRow][endCol] != null && !board.board[endRow][endCol].getColor().equals(this.getColor())) {
                return true;
            }
        }
        return false;
    }

    private boolean isValidPosition(int row, int col) {
        return row >= 0 && row < 8 && col >= 0 && col < 8;
    }
}

// Пример класса Rook

public class Rook extends ChessPiece {

    public Rook(String color) {
        super(color);
    }

    @Override
    public boolean canMoveToPosition(ChessBoard board, int startRow, int startCol, int endRow, int endCol) {
        if (!isValidPosition(endRow, endCol)) return false;
        if (startRow == endRow) {
            int colStep = (startCol < endCol) ? 1 : -1;
            for (int col = startCol + colStep; col != endCol; col += colStep) {
                if (board.board[startRow][col] != null) return false;
            }
        } else if (startCol == endCol) {
            int rowStep = (startRow < endRow) ? 1 : -1;
            for (int row = startRow + rowStep; row != endRow; row += rowStep) {
                if (board.board[row][startCol] != null) return false;
            }
        } else {
            return false;
        }
        return board.board[endRow][endCol] == null || !board.board[endRow][endCol].getColor().equals(this.getColor());
    }

    private boolean isValidPosition(int row, int col) {
        return row >= 0 && row < 8 && col >= 0 && col < 8;
    }
}

// Класс ChessPiece должен быть абстрактным и от него должны наследоваться все фигуры

public abstract class ChessPiece {
    private String color;

    public ChessPiece(String color) {
        this.color = color;
    }

    public String getColor() {
        return color;
    }

    public abstract boolean canMoveToPosition(ChessBoard board, int startRow, int startCol, int endRow, int endCol);
}

// Класс ChessBoard

public class ChessBoard {
    private ChessPiece[][] board;
    private boolean whiteKingMoved = false;
    private boolean blackKingMoved = false;
    private boolean[] whiteRookMoved = {false, false}; // Для двух ладей
    private boolean[] blackRookMoved = {false, false}; // Для двух ладей

    public ChessBoard() {
        // Инициализация доски
    }

    public boolean canCastle(int color, boolean isShortCastle) {
        if (color == 0) { // Белые
            if (whiteKingMoved) return false;
            if (isShortCastle) {
                if (whiteRookMoved[1]) return false; // Правая ладья
                return isPathClear(7, 4, 7, 7) && isNotInCheckDuringCastle(0, true);
            } else {
                if (whiteRookMoved[0]) return false; // Левая ладья
                return isPathClear(7, 0, 7, 4) && isNotInCheckDuringCastle(0, false);
            }
        } else { // Чёрные
            if (blackKingMoved) return false;
            if (isShortCastle) {
                if (blackRookMoved[1]) return false; // Правая ладья
                return isPathClear(0, 4, 0, 7) && isNotInCheckDuringCastle(1, true);
            } else {
                if (blackRookMoved[0]) return false; // Левая ладья
                return isPathClear(0, 0, 0, 4) && isNotInCheckDuringCastle(1, false);
            }
        }
    }

    private boolean isPathClear(int row, int startCol, int endCol) {
        for (int i = startCol + 1; i < endCol; i++) {
            if (board[row][i] != null) return false;
        }
        return true;
    }

    private boolean isNotInCheckDuringCastle(int color, boolean isShortCastle) {
        // Проверка, что король не находится под атакой
        // при переходе через клетки для рокировки
        // Реализуется проверка, на шах в клетках перехода
        return true; // Упрощённо
    }

    public void performCastle(int color, boolean isShortCastle) {
        if (canCastle(color, isShortCastle)) {
            if (color == 0) { // Белые
                if (isShortCastle) {
                    movePiece(7, 4, 7, 6); // Короля
                    movePiece(7, 7, 7, 5); // Ладью
                } else {
                    movePiece(7, 4, 7, 2);
                    movePiece(7, 0, 7, 3);
                }
                whiteKingMoved = true;
                whiteRookMoved[isShortCastle ? 1 : 0] = true;
            } else { // Чёрные
                if (isShortCastle) {
                    movePiece(0, 4, 0, 6);
                    movePiece(0, 7, 0, 5);
                } else {
                    movePiece(0, 4, 0, 2);
                    movePiece(0, 0, 0, 3);
                }
                blackKingMoved = true;
                blackRookMoved[isShortCastle ? 1 : 0] = true;
            }
        }
    }

    private void movePiece(int startRow, int startCol, int endRow, int endCol) {
        board[endRow][endCol] = board[startRow][startCol];
        board[startRow][startCol] = null;
    }
}
